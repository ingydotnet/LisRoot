* interop is key
shows the strnegth of Jank vs. Python
not just to show the power of Clojure
This has been shown with Portal

* goal is to make CERN/Geneva
** adopt Jank as standard Script language for Root
*** show that Jank is faster than Python
*** does not need a bridge
** write a functional layer on top of Root

* resources
** https://www.youtube.com/watch?v=l7KXd76ymVk
https://vassil.vassilev.info


* Show that Jank is Jupyter style more than C++/Python

* Slacktext
From Jank, I'd like to call into ROOT, CERN's data-tool which is installed on my Mac.
Based on ROOT's manual [1], I riffed the following code into a file, the resulting clang++ compiled program creates a pdf which shows a simple graph (a line).

#include "TF1.h"
#include "TCanvas.h"

void drawFunc(double (*func)(double*, double*), double parameter) {
  TF1 *Fun  = new TF1("Fun",func,-5.001,5.,2);
  Fun->SetParameter(0, parameter);
  TCanvas *c = new TCanvas("c", "Something", 0, 0, 800, 600);
  Fun->Draw();
  c->Print("demo4.pdf");
}

double line(double *x, double *parameter) {
  return parameter[0]*x[0];
}

int main(int argc, char **argv) {
  drawFunc(&line, 3.0);
  return 0;
}

Question: can I hack some similar code into Jank (and recompile it)? The goal is to call a hacked in C-function (like `drawFunc` above) and pass some Jank-function as parameter.

[1] https://root.cern/manual/creating_a_user_application/#batch-example-generating-a-pdf-file


* read types from file
** add type within program
